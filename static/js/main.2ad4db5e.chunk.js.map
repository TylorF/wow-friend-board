{"version":3,"sources":["components/FriendCard/FriendCard.js","components/FriendList/FriendList.js","components/AppBar/AppBar.js","App.js","registerServiceWorker.js","index.js","components/FriendCard/FriendCard.module.css","components/AppBar/AppBar.module.css"],"names":["components_FriendCard_FriendCard","state","loaded","error","expanded","character","thumbnailUrl","region","type","thumbnailKey","replace","concat","characterDataUrl","apiKey","realm","fields","arguments","length","undefined","fieldString","join","url","params","queryCharacterData","axios_default","a","get","_this","props","apikey","then","resp","window","progression","data","console","log","setState","catch","e","emptyCharacter","name","items","averageItemLevel","titles","expandable","classString","FriendCard_module","toggleExpand","enabledTitleStringOrBlank","find","t","selected","formatNameWithTitle","title","charImageUrlForState","settings","thumbnail","this","response","status","react_default","createElement","titleName","Fragment","className","style","backgroundImage","onClick","level","totalHonorableKills","achievementPoints","errorMessage","cardDetails","react","FriendList","characters","map","char","key","components_AppBar_AppBar","selection","settingsSaveSubmit","event","preventDefault","FormData","target","onSaveSettings","charactersAddSubmit","formData","newChar","newCharString","characterString","onSaveCharacters","deleteCharacter","filter","onSubmit","id","_this2","existingCharacterList","settingsContent","charactersContent","tab","tabClasses","AppBar_module","push","_this3","getDropDownTabClass","onTabClick","getContent","src_App_0","JSON","parse","localStorage","getItem","setItem","stringify","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","react_dom_default","render","document","getElementById","URL","origin","addEventListener","fetch","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","FriendCard","open","InfoHolder","MediumCardImage","NameField","DetailField","AppBar","DropDown","Logo","DropDownTabHolder","DropDownTab","Active"],"mappings":"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","file":"static/js/main.2ad4db5e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport * as classes from './FriendCard.module.css';\r\n\r\n\r\nclass FriendCard extends Component {\r\n    state = {\r\n        loaded: false,\r\n        error: null,\r\n        expanded: false,\r\n        character: null\r\n    };\r\n\r\n    // Type is avatar, main, inset\r\n    // http://render-{region}.worldofwarcraft.com/character/{character.thumbnail}\r\n    thumbnailUrl = (region, thumbnailUrl, type) => {\r\n        const prefix = 'http://render-';\r\n        const body = '.worldofwarcraft.com/character/';\r\n        const thumbnailKey = thumbnailUrl.replace('avatar.jpg', `${type}.jpg`)\r\n        return `${prefix}${region}${body}${thumbnailKey}?alt=/wow/static/images/2d/avatar/1-0.jpg`\r\n    };\r\n\r\n    characterDataUrl = (apiKey, region, realm, character, fields = []) => {\r\n        const fieldString = `${fields.length > 0 ? `&fields=${fields.join(',')}` : ''}`;\r\n        \r\n        const url = `https://${region}.api.battle.net/wow/character/${realm}/${character}`;\r\n        const params = `?locale=en_US&apikey=${apiKey}${fieldString}`;\r\n        return `${url}${params}`\r\n    };\r\n\r\n    queryCharacterData = () => {\r\n        const fields = ['items', 'titles', 'progression'];\r\n        axios.get(this.characterDataUrl(\r\n            this.props.apikey,\r\n            this.props.region,\r\n            this.props.realm,\r\n            this.props.character, \r\n            fields\r\n        )).then(resp => {\r\n            window.progression = resp.data.progression;\r\n            console.log(resp.data);\r\n            this.setState({\r\n                character: resp.data,\r\n                loaded: true,\r\n                error: null\r\n            });\r\n        }).catch(e => {\r\n            console.log(e);\r\n            window.error = e;\r\n            this.setState({loaded: false, error: e});\r\n        });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (!this.state.loaded && !this.state.error)\r\n            this.queryCharacterData();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.queryCharacterData();\r\n    }\r\n\r\n    emptyCharacter = () => {\r\n        return { \r\n            name: this.props.character, \r\n            items: {averageItemLevel: '...'}, \r\n            titles: [] \r\n        };\r\n    }\r\n\r\n    expandable = (classString) => {\r\n        if (this.state.expanded)\r\n            return `${classString} ${classes.open}`;\r\n        else\r\n            return classString;\r\n    }\r\n\r\n    toggleExpand = () => this.setState({expanded: !this.state.expanded});\r\n\r\n    // Title format is \"title %s\" so blank is actually \"%s\"\r\n    enabledTitleStringOrBlank = (titles) => (titles.find((t) => t.selected) || {name: \"%s\"}).name;\r\n    formatNameWithTitle = (title, name) => title.replace('%s', name);\r\n    charImageUrlForState = () => {\r\n        const character = this.state.character || {};\r\n        let settings = {\r\n            region: character.region || 'us',\r\n            thumbnailUrl: character.thumbnail || 'fallback',\r\n            type: this.state.expanded ? 'main' : 'inset'\r\n        }\r\n        return this.thumbnailUrl(settings.region, settings.thumbnailUrl, settings.type)\r\n    }\r\n\r\n    errorMessage(error) {\r\n        const status = error.response.status;\r\n        if (status === 404) {\r\n            return <span>Character {`${this.props.region}/${this.props.realm}/${this.props.character}`} does not exist :(</span>\r\n        } else {\r\n            return <span>An error has occurred...</span>\r\n        }\r\n    }\r\n\r\n    cardDetails() {\r\n        const character = this.state.character || this.emptyCharacter();\r\n        const titleName = this.formatNameWithTitle(\r\n            this.enabledTitleStringOrBlank(character.titles), \r\n            character.name\r\n        );\r\n        return (\r\n            <React.Fragment>\r\n                <div className={this.expandable(classes.MediumCardImage)}\r\n                    style={{backgroundImage: `url('${this.charImageUrlForState()}')`}}\r\n                    onClick={this.toggleExpand}>\r\n                </div>\r\n                <div className={classes.InfoHolder}>\r\n                    <div className={classes.NameField}>\r\n                        <span>{titleName}</span>\r\n                    </div>\r\n                    <br />\r\n                    <div className={classes.DetailField}>\r\n                        <span>LV: {character.level}</span>\r\n                    </div>\r\n            \r\n                    <div className={classes.DetailField}>\r\n                        <span>iLevel: {character.items.averageItemLevel}</span>\r\n                    </div>\r\n                    \r\n                    <div className={classes.DetailField}>\r\n                        <span>HKs: {character.totalHonorableKills}</span>\r\n                    </div>\r\n\r\n                    <div className={classes.DetailField}>\r\n                        <span>Achievement Points: {character.achievementPoints}</span>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.expandable(classes.FriendCard)} >\r\n                {this.state.error ? this.errorMessage(this.state.error) : this.cardDetails()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FriendCard;","import React from 'react';\r\n\r\nimport FriendCard from '../FriendCard/FriendCard';\r\nconst friendList = (props) => {\r\n    \r\n    \r\n    return (\r\n        props.characters.map((char) => {\r\n            return (\r\n              <FriendCard \r\n                key={char.name}\r\n                apikey={props.apiKey}\r\n                region={char.region}\r\n                realm={char.realm}\r\n                character={char.name}\r\n              />\r\n            );\r\n          })\r\n    );\r\n}\r\n\r\n\r\nexport default friendList;","import React, { Component } from 'react';\r\n\r\nimport * as classes from './AppBar.module.css';\r\n\r\nclass AppBar extends Component {\r\n    state = {\r\n        expanded: false,\r\n        selection: null\r\n    }\r\n\r\n    settingsContent () {\r\n        return (\r\n            <form onSubmit={this.settingsSaveSubmit}>\r\n                <label>Api Key:</label> \r\n                <input id=\"apiKey\" type=\"text\" name=\"apiKey\" />\r\n                <button>Save</button>\r\n            </form>\r\n        );\r\n    };\r\n\r\n    existingCharacterList () {\r\n        return this.props.characters.map((character) => {\r\n            return(\r\n                <div>\r\n                    <label onClick={() => this.deleteCharacter(character)} key={this.characterString(character)}>{this.characterString(character)} -- Delete</label>\r\n                    <br/>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n    charactersContent () {\r\n        return (\r\n            <React.Fragment>\r\n                {this.existingCharacterList()}\r\n                <form onSubmit={this.charactersAddSubmit}>\r\n                    <label>Region:</label> \r\n                    <input id=\"region\" type=\"text\" name=\"region\" />\r\n                    <br />\r\n                    <label>Realm:</label> \r\n                    <input id=\"realm\" type=\"text\" name=\"realm\" />\r\n                    <br />\r\n                    <label>Character Name:</label> \r\n                    <input id=\"name\" type=\"text\" name=\"name\" />\r\n                    <button>Add</button>\r\n                </form>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    settingsSaveSubmit = (event) => {\r\n        event.preventDefault();\r\n        const formData = new FormData(event.target);\r\n        const apiKey = formData.get('apiKey');\r\n        const settings = {\r\n          ...this.props.settings,\r\n          apiKey: apiKey\r\n        };\r\n        this.props.onSaveSettings(settings);\r\n      };\r\n    \r\n      charactersAddSubmit = (event) => {\r\n        event.preventDefault();\r\n        const formData = new FormData(event.target);\r\n        const newChar = {\r\n          region:  formData.get('region'),\r\n          realm:  formData.get('realm'),\r\n          name:  formData.get('name'),\r\n        }\r\n        const newCharString = this.characterString(newChar);\r\n        const existing = this.props.characters.find(char => this.characterString(char) === newCharString)\r\n        if (existing) {\r\n          return false;\r\n        }\r\n        const characters = [\r\n          ...this.props.characters,\r\n          newChar\r\n        ];\r\n        this.props.onSaveCharacters(characters);\r\n      }\r\n    \r\n\r\n    characterString = (character) => {\r\n        return `${character.region}/${character.realm}/${character.name}`\r\n    }\r\n    \r\n    deleteCharacter = (character) => {\r\n        this.props.onSaveCharacters(this.props.characters.filter((char) => char !== character))\r\n    }\r\n    \r\n\r\n    getContent(selection) {\r\n        switch(selection) {\r\n            case 'settings':\r\n                return this.settingsContent();\r\n            case 'characters':\r\n                return this.charactersContent();\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    getDropDownTabClass(tab) {\r\n        const tabClasses = [classes.DropDownTab];\r\n        if(this.state.expanded && this.state.selection === tab) {\r\n            tabClasses.push(classes.Active); \r\n        }\r\n        return tabClasses.join(' ');\r\n    }\r\n\r\n    onTabClick (tab){\r\n        if(tab === this.state.selection){\r\n            this.setState({selection: null, expanded: false});\r\n        } else {\r\n            this.setState({selection: tab, expanded: true});\r\n        }\r\n    }\r\n\r\n    render () {\r\n        return(\r\n            <React.Fragment>\r\n                <header className={classes.AppBar}>\r\n                    <div className={classes.Logo}>WoW Friend Board</div>\r\n                    <div className={classes.DropDownTabHolder}>\r\n                        <div \r\n                            className={this.getDropDownTabClass('settings')} \r\n                            onClick={() => this.onTabClick('settings')}\r\n                        >Settings</div>\r\n                        <div \r\n                            className={this.getDropDownTabClass('characters')} \r\n                            onClick={() => this.onTabClick('characters')}\r\n                        >Friend List</div>\r\n                    </div>\r\n                </header>\r\n                <div className={this.state.expanded ? [classes.DropDown, classes.open].join(' ') : classes.DropDown}>\r\n                    {this.getContent(this.state.selection)}\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppBar;","import React, { Component } from 'react';\nimport './App.css';\n\nimport FriendList from './components/FriendList/FriendList';\nimport AppBar from './components/AppBar/AppBar';\n\nclass App extends Component {\n  state = {\n    settings: JSON.parse(localStorage.getItem('settings') || '{}'),\n    characters: JSON.parse(localStorage.getItem('characters') || '[]')\n  }\n\n\n  onSaveSettings = (settings) => {\n    localStorage.setItem('settings', JSON.stringify(settings));\n    this.setState({\n      settings: settings\n    })\n  };\n\n  onSaveCharacters = (characters) => {\n    localStorage.setItem('characters', JSON.stringify(characters));\n    this.setState({\n      characters: characters\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <AppBar \n          characters={this.state.characters}\n          onSaveSettings={this.onSaveSettings}\n          onSaveCharacters={this.onSaveCharacters}\n        />\n        <FriendList \n          apiKey={this.state.settings.apiKey}\n          characters={this.state.characters}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FriendCard\":\"FriendCard_FriendCard__20M9P\",\"open\":\"FriendCard_open__3ZPGx\",\"InfoHolder\":\"FriendCard_InfoHolder__184Tw\",\"MediumCardImage\":\"FriendCard_MediumCardImage__2csba\",\"NameField\":\"FriendCard_NameField__kN1Qs\",\"DetailField\":\"FriendCard_DetailField__3o6_l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppBar\":\"AppBar_AppBar__3eFER\",\"DropDown\":\"AppBar_DropDown__2CSlV\",\"open\":\"AppBar_open__1zElJ\",\"Logo\":\"AppBar_Logo__2bwKS\",\"DropDownTabHolder\":\"AppBar_DropDownTabHolder__-YNvH\",\"DropDownTab\":\"AppBar_DropDownTab__3EnnQ\",\"Active\":\"AppBar_Active__1g-W2\"};"],"sourceRoot":""}