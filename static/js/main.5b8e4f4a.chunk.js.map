{"version":3,"sources":["components/FriendCard/FriendCard.module.css","lib/Battlenet.js","components/FriendCard/FriendCard.js","components/FriendList/FriendList.js","components/AppBar/AppBar.js","components/AppBar/SettingsMenu/SettingsMenu.js","components/AppBar/CharactersMenu/CharactersMenu.js","App.js","registerServiceWorker.js","index.js","components/AppBar/AppBar.module.css"],"names":["module","exports","FriendCard","open","InfoHolder","MediumCardImage","NameField","GuildField","DetailField","ErrorMessage","lib_Battlenet","Battlenet","apiKey","_this","this","_classCallCheck","characterData","region","realm","character","fields","axios_default","a","get","characterDataUrl","catch","e","console","log","characterImageUrl","thumbnailUrl","type","thumbnailKey","replace","concat","arguments","length","undefined","fieldString","join","url","params","components_FriendCard_FriendCard","state","loaded","error","expanded","queryCharacterData","_this$props","props","battlenet","then","resp","data","setState","emptyCharacter","name","items","averageItemLevel","titles","expandable","classString","FriendCard_module","toggleExpand","prev","enabledTitleStringOrBlank","find","t","selected","formatNameWithTitle","title","charImageUrlForState","_this$state","_this$state$character","thumbnail","errorMessage","message","status","response","_this$props2","charString","react_default","createElement","className","guildField","cardDetails","_this$state$character2","titleName","Fragment","guild","level","totalHonorableKills","achievementPoints","prevProps","_this$state2","_this2","_this$state3","role","aria-expanded","tabIndex","style","backgroundImage","onClick","onKeyPress","key","react","FriendList","characters","map","char","AppBar_AppBar","selection","getDropDownTabClass","tab","tabClasses","AppBar_module","push","childTabs","children","tabDef","tabName","onTabClick","activeTab","filter","getDropDownClass","event","target","blur","defaultProps","BarTab","components_AppBar_AppBar","AppBar_SettingsMenu_SettingsMenu","withApiExport","exportString","settings","output","JSON","stringify","settingsSaveSubmit","onSaveSettings","preventDefault","newSettings","FormData","importSettingsSubmit","_this$props3","onSaveCharacters","formData","parsedImport","parse","newCharacters","_toConsumableArray","onSubmit","htmlFor","id","onChange","checked","readOnly","value","AppBar_CharactersMenu_CharactersMenu","existingCharacterList","characterString","deleteCharacter","charactersAddSubmit","newChar","newCharString","CharactersMenu_toConsumableArray","src_App_0","App","App_classCallCheck","App_possibleConstructorReturn","App_getPrototypeOf","call","localStorage","setItem","App_objectSpread","App_toConsumableArray","getItem","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","react_dom_default","render","document","getElementById","URL","origin","addEventListener","fetch","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","AppBar","DropDown","Logo","DropDownTabHolder","DropDownTab","Active"],"mappings":"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","file":"static/js/main.5b8e4f4a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"FriendCard\":\"FriendCard_FriendCard__20M9P\",\"open\":\"FriendCard_open__3ZPGx\",\"InfoHolder\":\"FriendCard_InfoHolder__184Tw\",\"MediumCardImage\":\"FriendCard_MediumCardImage__2csba\",\"NameField\":\"FriendCard_NameField__kN1Qs\",\"GuildField\":\"FriendCard_GuildField__3Deg2\",\"DetailField\":\"FriendCard_DetailField__3o6_l\",\"ErrorMessage\":\"FriendCard_ErrorMessage__GvJgi\"};","import axios from 'axios';\n\n//\nclass Battlenet {\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n  }\n\n  characterData = (region, realm, character, fields) =>\n    axios\n      .get(this.characterDataUrl(this.apiKey, region, realm, character, fields))\n      .catch(e => {\n        // I want errors to go to the console always so we can investigate them\n        // eslint-disable-next-line no-console\n        console.log(e);\n        throw e;\n      });\n\n  // Type is avatar, main, inset\n  // https://render-{region}.worldofwarcraft.com/character/{character.thumbnail}\n  characterImageUrl = (region, thumbnailUrl, type) => {\n    const prefix = 'https://render-';\n    const body = '.worldofwarcraft.com/character/';\n    const thumbnailKey = thumbnailUrl.replace('avatar.jpg', `${type}.jpg`);\n    return `${prefix}${region}${body}${thumbnailKey}?alt=/wow/static/images/2d/avatar/1-0.jpg`;\n  };\n\n  characterDataUrl = (apiKey, region, realm, character, fields = []) => {\n    const fieldString = `${\n      fields.length > 0 ? `&fields=${fields.join(',')}` : ''\n    }`;\n\n    const url = `https://${region}.api.battle.net/wow/character/${realm}/${character}`;\n    const params = `?locale=en_US&apikey=${apiKey}${fieldString}`;\n    return `${url}${params}`;\n  };\n}\n\nexport default Battlenet;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport * as classes from './FriendCard.module.css';\nimport Battlenet from '../../lib/Battlenet';\n\nclass FriendCard extends Component {\n  state = {\n    loaded: false,\n    error: null,\n    expanded: false,\n    character: undefined\n  };\n\n  componentDidMount() {\n    this.queryCharacterData();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { battlenet } = this.props;\n    const { loaded, error } = this.state;\n    if (battlenet !== prevProps.battlenet) this.queryCharacterData();\n    else if (!loaded && !error) this.queryCharacterData();\n  }\n\n  queryCharacterData = () => {\n    const { battlenet, region, realm, character } = this.props;\n    const fields = ['items', 'titles', 'progression', 'guild'];\n    battlenet\n      .characterData(region, realm, character, fields)\n      .then(resp => {\n        // I like the character data being available for dev\n        // eslint-disable-next-line no-console\n        console.log(resp.data);\n        this.setState({\n          character: resp.data,\n          loaded: true,\n          error: null\n        });\n      })\n      .catch(e => {\n        this.setState({ loaded: false, error: e });\n      });\n  };\n\n  emptyCharacter = () => {\n    const { character } = this.props;\n    return {\n      name: `Loading ${character}...`,\n      items: { averageItemLevel: '...' },\n      titles: []\n    };\n  };\n\n  expandable = classString => {\n    const { expanded } = this.state;\n    if (expanded) return `${classString} ${classes.open}`;\n    return classString;\n  };\n\n  toggleExpand = () => {\n    this.setState(prev => ({ expanded: !prev.expanded }));\n  };\n\n  // Title format is \"title %s\" so blank is actually \"%s\"\n  enabledTitleStringOrBlank = titles =>\n    (titles.find(t => t.selected) || { name: '%s' }).name;\n\n  formatNameWithTitle = (title, name) => title.replace('%s', name);\n\n  charImageUrlForState = () => {\n    const { character = {}, expanded } = this.state;\n    const { battlenet } = this.props;\n    return battlenet.characterImageUrl(\n      character.region || 'us',\n      character.thumbnail || 'fallback',\n      expanded ? 'main' : 'inset'\n    );\n  };\n\n  errorMessage = error => {\n    const { response: status } = error;\n    const { region, realm, character } = this.props;\n    let message;\n    if (status === 404) {\n      const charString = `${region}/${realm}/${character}`;\n      message = <span>{`Character ${charString} does not exist :(`}</span>;\n    } else {\n      message = <span>An error has occurred...</span>;\n    }\n    return <div className={classes.ErrorMessage}>{message}</div>;\n  };\n\n  guildField = name => (\n    <div className={classes.GuildField}>\n      <span>{`<${name}>`}</span>\n    </div>\n  );\n\n  cardDetails = () => {\n    const { character = this.emptyCharacter() } = this.state;\n    const titleName = this.formatNameWithTitle(\n      this.enabledTitleStringOrBlank(character.titles),\n      character.name\n    );\n\n    return (\n      <React.Fragment>\n        <div className={classes.NameField}>\n          <span>{titleName}</span>\n        </div>\n        {character.guild ? (\n          <div className={classes.GuildField}>\n            <span>{`<${character.guild.name}>`}</span>\n          </div>\n        ) : null}\n        <br />\n        <div className={classes.DetailField}>\n          <span>{`LV: ${character.level}`}</span>\n        </div>\n\n        <div className={classes.DetailField}>\n          <span>{`iLevel: ${character.items.averageItemLevel}`}</span>\n        </div>\n\n        <div className={classes.DetailField}>\n          <span>{`HKs: ${character.totalHonorableKills}`}</span>\n        </div>\n\n        <div className={classes.DetailField}>\n          <span>{`Achievement Points: ${character.achievementPoints}`}</span>\n        </div>\n      </React.Fragment>\n    );\n  };\n\n  render() {\n    const { error, expanded } = this.state;\n\n    return (\n      <div className={this.expandable(classes.FriendCard)}>\n        <div\n          role=\"button\"\n          aria-expanded={expanded}\n          tabIndex=\"0\"\n          className={this.expandable(classes.MediumCardImage)}\n          style={{ backgroundImage: `url('${this.charImageUrlForState()}')` }}\n          onClick={() => this.toggleExpand()}\n          onKeyPress={e => {\n            if (e.key === 'Enter') this.toggleExpand();\n          }}\n        />\n        <div className={classes.InfoHolder}>\n          {error ? this.errorMessage(error) : this.cardDetails()}\n        </div>\n      </div>\n    );\n  }\n}\n\nFriendCard.propTypes = {\n  battlenet: PropTypes.instanceOf(Battlenet).isRequired,\n  region: PropTypes.string.isRequired,\n  realm: PropTypes.string.isRequired,\n  character: PropTypes.string.isRequired\n};\n\nexport default FriendCard;\n","import React from 'react';\n\nimport FriendCard from '../FriendCard/FriendCard';\n\nconst friendList = props =>\n  props.characters.map(char => (\n    <FriendCard\n      key={char.name}\n      battlenet={props.battlenet}\n      region={char.region}\n      realm={char.realm}\n      character={char.name}\n    />\n  ));\n\nexport default friendList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport * as classes from './AppBar.module.css';\n\nclass AppBar extends Component {\n  state = {\n    expanded: false,\n    selection: null\n  };\n\n  onTabClick(tabName, event) {\n    const { selection } = this.state;\n    if (tabName === selection) {\n      this.setState({ selection: null, expanded: false });\n      event.target.blur();\n    } else {\n      this.setState({ selection: tabName, expanded: true });\n    }\n  }\n\n  getDropDownTabClass = tab => {\n    const { expanded, selection } = this.state;\n    const tabClasses = [classes.DropDownTab];\n    if (expanded && selection === tab) {\n      tabClasses.push(classes.Active);\n    }\n    return tabClasses.join(' ');\n  };\n\n  childTabs = () => {\n    const { children } = this.props;\n    // Turn it into an array in case there's only one element\n    return [].concat(children).map(tabDef => {\n      const tabName = tabDef.props.title;\n      return (\n        <div\n          key={tabName}\n          role=\"tab\"\n          tabIndex=\"0\"\n          className={this.getDropDownTabClass(tabName)}\n          onClick={e => this.onTabClick(tabName, e)}\n          onKeyPress={e => {\n            if (e.key === 'Enter') this.onTabClick(tabName, e);\n          }}\n        >\n          {tabName}\n        </div>\n      );\n    });\n  };\n\n  activeTab = () => {\n    const { children } = this.props;\n    const { selection } = this.state;\n    return children.filter(tab => tab.props.title === selection);\n  };\n\n  getDropDownClass = () => {\n    const { expanded } = this.state;\n    if (expanded) return [classes.DropDown, classes.open].join(' ');\n    return classes.DropDown;\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <header className={classes.AppBar}>\n          <div className={classes.Logo}>WoW Friend Board</div>\n          <div className={classes.DropDownTabHolder} role=\"tablist\">\n            {this.childTabs()}\n          </div>\n        </header>\n        <div className={this.getDropDownClass()}>{this.activeTab()}</div>\n      </React.Fragment>\n    );\n  }\n}\n\nAppBar.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.arrayOf(PropTypes.element)\n  ])\n};\n\nAppBar.defaultProps = {\n  children: []\n};\n\n// BarTab component for wrapping content\n// requires title prop\nexport const BarTab = props => props.children;\n\nexport default AppBar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass SettingsMenu extends Component {\n  state = {\n    withApiExport: false\n  };\n\n  exportString = () => {\n    const { settings, characters } = this.props;\n    const { withApiExport } = this.state;\n    const output = {\n      settings: { ...settings },\n      characters\n    };\n    if (!withApiExport) {\n      delete output.settings;\n    }\n    return JSON.stringify(output);\n  };\n\n  settingsSaveSubmit = event => {\n    const { settings, onSaveSettings } = this.props;\n    event.preventDefault();\n    const formData = new FormData(event.target);\n    const apiKey = formData.get('apiKey');\n    const newSettings = {\n      ...settings,\n      apiKey\n    };\n    onSaveSettings(newSettings);\n  };\n\n  importSettingsSubmit = event => {\n    const {\n      settings,\n      characters,\n      onSaveSettings,\n      onSaveCharacters\n    } = this.props;\n    event.preventDefault();\n    const formData = new FormData(event.target);\n    const parsedImport = JSON.parse(formData.get('importData'));\n    if (parsedImport.settings) {\n      const newSettings = {\n        ...settings,\n        ...parsedImport.settings\n      };\n      onSaveSettings(newSettings);\n    }\n\n    if (parsedImport.characters) {\n      const newCharacters = [...characters, ...parsedImport.characters];\n      onSaveCharacters(newCharacters);\n    }\n  };\n\n  render() {\n    const exportString = this.exportString();\n    return (\n      <React.Fragment>\n        <form onSubmit={this.settingsSaveSubmit}>\n          <h4>Settings</h4>\n          <label htmlFor=\"apikey\">\n            Api Key:\n            <input id=\"apiKey\" type=\"text\" name=\"apiKey\" />\n          </label>\n\n          <button type=\"submit\">Save</button>\n        </form>\n        <form>\n          <h4>Export Configuration</h4>\n          <input\n            type=\"checkbox\"\n            onChange={e => this.setState({ withApiExport: e.target.checked })}\n          />\n          <span>Include API Key</span>\n          <br />\n          {exportString ? <textarea readOnly value={exportString} /> : null}\n        </form>\n        <form onSubmit={this.importSettingsSubmit}>\n          <h4>Import Configuration</h4>\n          <textarea id=\"importData\" name=\"importData\" />\n          <button type=\"submit\">Import</button>\n        </form>\n      </React.Fragment>\n    );\n  }\n}\n\nSettingsMenu.propTypes = {\n  settings: PropTypes.shape({ apiKey: PropTypes.string }).isRequired,\n  characters: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onSaveSettings: PropTypes.func.isRequired,\n  onSaveCharacters: PropTypes.func.isRequired\n};\n\nexport default SettingsMenu;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass CharactersMenu extends Component {\n  existingCharacterList = () => {\n    const { characters } = this.props;\n    return characters.map(character => (\n      <div key={this.characterString(character)}>\n        <span\n          role=\"button\"\n          tabIndex=\"0\"\n          onClick={() => this.deleteCharacter(character)}\n          onKeyPress={e => {\n            if (e.key === 'Enter') this.deleteCharacter(character);\n          }}\n        >\n          {`${this.characterString(character)} -- Delete`}\n        </span>\n        <br />\n      </div>\n    ));\n  };\n\n  charactersAddSubmit = event => {\n    event.preventDefault();\n    const { characters, onSaveCharacters } = this.props;\n    const formData = new FormData(event.target);\n    const newChar = {\n      region: formData.get('region'),\n      realm: formData.get('realm'),\n      name: formData.get('name')\n    };\n    const newCharString = this.characterString(newChar);\n    const existing = characters.find(\n      char => this.characterString(char) === newCharString\n    );\n    if (existing) {\n      return; // TODO: add messaging\n    }\n    onSaveCharacters([...characters, newChar]);\n  };\n\n  characterString = character =>\n    `${character.region}/${character.realm}/${character.name}`;\n\n  deleteCharacter = character => {\n    const { characters, onSaveCharacters } = this.props;\n    onSaveCharacters(characters.filter(char => char !== character));\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.existingCharacterList()}\n        <form onSubmit={this.charactersAddSubmit}>\n          <label htmlFor=\"region\">\n            Region:\n            <input id=\"region\" type=\"text\" name=\"region\" />\n          </label>\n\n          <br />\n          <label htmlFor=\"realm\">\n            Realm:\n            <input id=\"realm\" type=\"text\" name=\"realm\" />\n          </label>\n\n          <br />\n          <label htmlFor=\"name\">\n            Character Name:\n            <input id=\"name\" type=\"text\" name=\"name\" />\n          </label>\n\n          <button type=\"submit\">Add</button>\n        </form>\n      </React.Fragment>\n    );\n  }\n}\n\nCharactersMenu.propTypes = {\n  characters: PropTypes.arrayOf(\n    PropTypes.shape({\n      region: PropTypes.string.isRequired,\n      realm: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  onSaveCharacters: PropTypes.func.isRequired\n};\n\nexport default CharactersMenu;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Battlenet from './lib/Battlenet';\n\nimport FriendList from './components/FriendList/FriendList';\nimport AppBar, { BarTab } from './components/AppBar/AppBar';\nimport SettingsMenu from './components/AppBar/SettingsMenu/SettingsMenu';\nimport CharactersMenu from './components/AppBar/CharactersMenu/CharactersMenu';\n\nclass App extends Component {\n  constructor() {\n    super();\n    const settings = JSON.parse(localStorage.getItem('settings') || '{}');\n    const characters = JSON.parse(localStorage.getItem('characters') || '[]');\n\n    this.state = {\n      settings,\n      characters,\n      battlenet: new Battlenet(settings.apiKey)\n    };\n  }\n\n  onSaveSettings = settings => {\n    localStorage.setItem('settings', JSON.stringify(settings));\n    this.setState({\n      settings: { ...settings },\n      battlenet: new Battlenet(settings.apiKey)\n    });\n  };\n\n  onSaveCharacters = characters => {\n    localStorage.setItem('characters', JSON.stringify(characters));\n    this.setState({\n      characters: [...characters]\n    });\n  };\n\n  render() {\n    const { settings, characters, battlenet } = this.state;\n    return (\n      <div className=\"App\">\n        <AppBar>\n          <BarTab title=\"Settings\">\n            <SettingsMenu\n              settings={settings}\n              characters={characters}\n              onSaveSettings={this.onSaveSettings}\n              onSaveCharacters={this.onSaveCharacters}\n            />\n          </BarTab>\n          <BarTab title=\"Characters\">\n            <CharactersMenu\n              characters={characters}\n              onSaveCharacters={this.onSaveCharacters}\n            />\n          </BarTab>\n        </AppBar>\n        <FriendList battlenet={battlenet} characters={characters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppBar\":\"AppBar_AppBar__3eFER\",\"DropDown\":\"AppBar_DropDown__2CSlV\",\"open\":\"AppBar_open__1zElJ\",\"Logo\":\"AppBar_Logo__2bwKS\",\"DropDownTabHolder\":\"AppBar_DropDownTabHolder__-YNvH\",\"DropDownTab\":\"AppBar_DropDownTab__3EnnQ\",\"Active\":\"AppBar_Active__1g-W2\"};"],"sourceRoot":""}