{"version":3,"sources":["components/FriendCard/FriendCard.module.css","lib/battlenet.js","components/FriendCard/FriendCard.js","components/FriendList/FriendList.js","components/AppBar/AppBar.js","components/AppBar/SettingsMenu/SettingsMenu.js","components/AppBar/CharactersMenu/CharactersMenu.js","App.js","registerServiceWorker.js","index.js","components/AppBar/AppBar.module.css"],"names":["module","exports","FriendCard","open","InfoHolder","MediumCardImage","NameField","GuildField","DetailField","ErrorMessage","lib_battlenet","battlenet","apiKey","_this","this","_classCallCheck","characterData","region","realm","character","fields","axios_default","a","get","characterDataUrl","catch","e","console","log","characterImageUrl","thumbnailUrl","type","thumbnailKey","replace","concat","arguments","length","undefined","fieldString","join","url","params","components_FriendCard_FriendCard","state","loaded","error","expanded","queryCharacterData","props","then","resp","data","setState","window","emptyCharacter","name","items","averageItemLevel","titles","expandable","classString","FriendCard_module","toggleExpand","enabledTitleStringOrBlank","find","t","selected","formatNameWithTitle","title","charImageUrlForState","settings","thumbnail","prevProps","message","response","status","charString","react_default","createElement","className","titleName","Fragment","guild","level","totalHonorableKills","achievementPoints","style","backgroundImage","onClick","errorMessage","cardDetails","react","FriendList","characters","map","char","key","BarTab","children","components_AppBar_AppBar","selection","content","getDropDownTabClass","tab","tabClasses","AppBar_module","push","childTabs","tabDef","tabName","onTabClick","activeTab","filter","getDropDownClass","AppBar_SettingsMenu_SettingsMenu","withApiExport","exportString","output","JSON","stringify","settingsSaveSubmit","event","preventDefault","FormData","target","onSaveSettings","importSettingsSubmit","formData","parsedImport","parse","_toConsumableArray","onSaveCharacters","_this2","onSubmit","id","onChange","checked","readOnly","value","AppBar_CharactersMenu_CharactersMenu","existingCharacterList","characterString","deleteCharacter","charactersAddSubmit","newChar","newCharString","CharactersMenu_toConsumableArray","src_App_0","App","App_classCallCheck","App_possibleConstructorReturn","App_getPrototypeOf","call","localStorage","setItem","App_objectSpread","App_toConsumableArray","getItem","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","react_dom_default","render","document","getElementById","URL","origin","addEventListener","fetch","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","AppBar","DropDown","Logo","DropDownTabHolder","DropDownTab","Active"],"mappings":"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","file":"static/js/main.b8289ea7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"FriendCard\":\"FriendCard_FriendCard__20M9P\",\"open\":\"FriendCard_open__3ZPGx\",\"InfoHolder\":\"FriendCard_InfoHolder__184Tw\",\"MediumCardImage\":\"FriendCard_MediumCardImage__2csba\",\"NameField\":\"FriendCard_NameField__kN1Qs\",\"GuildField\":\"FriendCard_GuildField__3Deg2\",\"DetailField\":\"FriendCard_DetailField__3o6_l\",\"ErrorMessage\":\"FriendCard_ErrorMessage__GvJgi\"};","import axios from 'axios';\r\n\r\n// \r\nclass battlenet {\r\n    constructor(apiKey) {\r\n        this.apiKey = apiKey;\r\n    }\r\n\r\n    characterData = (region, realm, character, fields) => {\r\n        return axios.get(this.characterDataUrl(\r\n            this.apiKey,\r\n            region,\r\n            realm,\r\n            character, \r\n            fields\r\n        )).catch(e => {\r\n            console.log(e);\r\n            throw(e);\r\n        });\r\n    };\r\n\r\n\r\n     // Type is avatar, main, inset\r\n    // https://render-{region}.worldofwarcraft.com/character/{character.thumbnail}\r\n    characterImageUrl = (region, thumbnailUrl, type) => {\r\n        const prefix = 'https://render-';\r\n        const body = '.worldofwarcraft.com/character/';\r\n        const thumbnailKey = thumbnailUrl.replace('avatar.jpg', `${type}.jpg`)\r\n        return `${prefix}${region}${body}${thumbnailKey}?alt=/wow/static/images/2d/avatar/1-0.jpg`\r\n    };\r\n\r\n    characterDataUrl = (apiKey, region, realm, character, fields = []) => {\r\n        const fieldString = `${fields.length > 0 ? `&fields=${fields.join(',')}` : ''}`;\r\n        \r\n        const url = `https://${region}.api.battle.net/wow/character/${realm}/${character}`;\r\n        const params = `?locale=en_US&apikey=${apiKey}${fieldString}`;\r\n        return `${url}${params}`\r\n    };\r\n\r\n}\r\n\r\nexport default battlenet;","import React, { Component } from 'react';\r\n\r\nimport * as classes from './FriendCard.module.css';\r\n\r\n\r\nclass FriendCard extends Component {\r\n    state = {\r\n        loaded: false,\r\n        error: null,\r\n        expanded: false,\r\n        character: null\r\n    };\r\n\r\n    queryCharacterData = () => {\r\n        const fields = ['items', 'titles', 'progression', 'guild'];\r\n        this.props.battlenet.characterData(\r\n            this.props.region,\r\n            this.props.realm,\r\n            this.props.character, \r\n            fields\r\n        ).then(resp => {\r\n            console.log(resp.data);\r\n            this.setState({\r\n                character: resp.data,\r\n                loaded: true,\r\n                error: null\r\n            });\r\n        }).catch(e => {\r\n            console.log(e);\r\n            window.error = e;\r\n            this.setState({loaded: false, error: e});\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.battlenet !== prevProps.battlenet)\r\n            this.queryCharacterData();\r\n        else if (!this.state.loaded && !this.state.error)\r\n            this.queryCharacterData();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.queryCharacterData();\r\n    }\r\n\r\n    emptyCharacter = () => {\r\n        return { \r\n            name: this.props.character, \r\n            items: {averageItemLevel: '...'}, \r\n            titles: [] \r\n        };\r\n    }\r\n\r\n    expandable = (classString) => {\r\n        if (this.state.expanded)\r\n            return `${classString} ${classes.open}`;\r\n        else\r\n            return classString;\r\n    }\r\n\r\n    toggleExpand = () => this.setState({expanded: !this.state.expanded});\r\n\r\n    // Title format is \"title %s\" so blank is actually \"%s\"\r\n    enabledTitleStringOrBlank = (titles) => (titles.find((t) => t.selected) || {name: \"%s\"}).name;\r\n    formatNameWithTitle = (title, name) => title.replace('%s', name);\r\n    charImageUrlForState = () => {\r\n        const character = this.state.character || {};\r\n        let settings = {\r\n            region: character.region || 'us',\r\n            thumbnailUrl: character.thumbnail || 'fallback',\r\n            type: this.state.expanded ? 'main' : 'inset'\r\n        }\r\n        return this.props.battlenet.characterImageUrl(settings.region, settings.thumbnailUrl, settings.type)\r\n    }\r\n\r\n    errorMessage(error) {\r\n        const status = error.response.status;\r\n        let message;\r\n        if (status === 404) {\r\n            const charString = `${this.props.region}/${this.props.realm}/${this.props.character}`;\r\n            message = <span>Character {charString} does not exist :(</span>;\r\n        } else {\r\n            message = <span>An error has occurred...</span>;\r\n        }\r\n        return <div className={classes.ErrorMessage}>{message}</div>;\r\n    }\r\n\r\n    guildField(name) {\r\n        return (\r\n            <div className={classes.GuildField}>\r\n                <span>{`<${name}>`}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    cardDetails() {\r\n        const character = this.state.character || this.emptyCharacter();\r\n        const titleName = this.formatNameWithTitle(\r\n            this.enabledTitleStringOrBlank(character.titles), \r\n            character.name\r\n        );\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className={classes.NameField}>\r\n                    <span>{titleName}</span>\r\n                </div>\r\n                {character.guild ? (\r\n                    <div className={classes.GuildField}>\r\n                        <span>{`<${character.guild.name}>`}</span>\r\n                    </div> \r\n                ): null}\r\n                <br />\r\n                <div className={classes.DetailField}>\r\n                    <span>LV: {character.level}</span>\r\n                </div>\r\n        \r\n                <div className={classes.DetailField}>\r\n                    <span>iLevel: {character.items.averageItemLevel}</span>\r\n                </div>\r\n                \r\n                <div className={classes.DetailField}>\r\n                    <span>HKs: {character.totalHonorableKills}</span>\r\n                </div>\r\n\r\n                <div className={classes.DetailField}>\r\n                    <span>Achievement Points: {character.achievementPoints}</span>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.expandable(classes.FriendCard)} >\r\n                <div className={this.expandable(classes.MediumCardImage)}\r\n                    style={{backgroundImage: `url('${this.charImageUrlForState()}')`}}\r\n                    onClick={this.toggleExpand}>\r\n                </div>\r\n                <div className={classes.InfoHolder}>\r\n                    {this.state.error ? this.errorMessage(this.state.error) : this.cardDetails()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FriendCard;","import React from 'react';\r\n\r\nimport FriendCard from '../FriendCard/FriendCard';\r\nconst friendList = (props) => {\r\n    \r\n    \r\n    return (\r\n        props.characters.map((char) => {\r\n            return (\r\n              <FriendCard \r\n                key={char.name}\r\n                battlenet={props.battlenet}\r\n                region={char.region}\r\n                realm={char.realm}\r\n                character={char.name}\r\n              />\r\n            );\r\n          })\r\n    );\r\n}\r\n\r\n\r\nexport default friendList;","import React, { Component } from 'react';\r\n\r\nimport * as classes from './AppBar.module.css';\r\n\r\nclass AppBar extends Component {\r\n    state = {\r\n        expanded: false,\r\n        selection: null,\r\n        content: null\r\n    };\r\n\r\n    getDropDownTabClass = (tab) => {\r\n        const tabClasses = [classes.DropDownTab];\r\n        if(this.state.expanded && this.state.selection === tab) {\r\n            tabClasses.push(classes.Active); \r\n        }\r\n        return tabClasses.join(' ');\r\n    }\r\n\r\n    onTabClick (tabName){\r\n        if(tabName === this.state.selection){\r\n            this.setState({selection: null, expanded: false});\r\n        } else {\r\n            this.setState({selection: tabName, expanded: true});\r\n        }\r\n    }\r\n\r\n    childTabs = () => {\r\n        // Turn it into an array in case there's only one element\r\n        return [].concat(this.props.children).map((tabDef) => {\r\n            const tabName = tabDef.props.title;\r\n            return (\r\n                <div \r\n                    key={tabName}\r\n                    className={this.getDropDownTabClass(tabName)} \r\n                    onClick={() => this.onTabClick(tabName)}\r\n                >{tabName}</div>\r\n            );\r\n        });\r\n    }\r\n\r\n    activeTab = () => {\r\n        return this.props.children.filter(tab => {\r\n            return tab.props.title === this.state.selection\r\n        })\r\n    }\r\n\r\n    getDropDownClass = () => {\r\n        if (this.state.expanded)\r\n            return [classes.DropDown, classes.open].join(' ');\r\n        else\r\n            return classes.DropDown;\r\n    }\r\n    \r\n    render () {\r\n        return(\r\n            <React.Fragment>\r\n                <header className={classes.AppBar}>\r\n                    <div className={classes.Logo}>WoW Friend Board</div>\r\n                    <div className={classes.DropDownTabHolder}>\r\n                        {this.childTabs()}\r\n                    </div>\r\n                </header>\r\n                <div className={this.getDropDownClass()}>\r\n                    {this.activeTab()}\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport const BarTab = (props) => {\r\n    return props.children;\r\n};\r\n\r\nexport default AppBar;","import React, { Component } from 'react';\r\n\r\nclass SettingsMenu extends Component {\r\n\r\n    state = {\r\n        withApiExport: false\r\n    }\r\n\r\n    exportString = () => {\r\n        const output = {\r\n            settings: {...this.props.settings},\r\n            characters: this.props.characters\r\n        };\r\n        if (!this.state.withApiExport){\r\n            delete output.settings;\r\n        }\r\n        return JSON.stringify(output);\r\n    };\r\n\r\n    settingsSaveSubmit = (event) => {\r\n        event.preventDefault();\r\n        const formData = new FormData(event.target);\r\n        const apiKey = formData.get('apiKey');\r\n        const settings = {\r\n          ...this.props.settings,\r\n          apiKey: apiKey\r\n        };\r\n        this.props.onSaveSettings(settings);\r\n    };\r\n\r\n    importSettingsSubmit = (event) => {\r\n        event.preventDefault();\r\n        const formData = new FormData(event.target);\r\n        const parsedImport = JSON.parse(formData.get('importData'));\r\n        if (parsedImport.settings) {\r\n            const settings = {\r\n                ...this.props.settings,\r\n                ...parsedImport.settings\r\n            };\r\n            this.props.onSaveSettings(settings);\r\n        }\r\n\r\n        if (parsedImport.characters) {\r\n            const characters = [\r\n                ...this.props.characters,\r\n                ...parsedImport.characters\r\n            ];\r\n            this.props.onSaveCharacters(characters);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const exportString = this.exportString();\r\n        return (\r\n            <React.Fragment>\r\n                <form onSubmit={this.settingsSaveSubmit}>\r\n                    <h4>Settings</h4>\r\n                    <label>Api Key:</label> \r\n                    <input id=\"apiKey\" type=\"text\" name=\"apiKey\" />\r\n                    <button>Save</button>\r\n                </form>\r\n                <form>\r\n                    <h4>Export Configuration</h4>\r\n                    <input \r\n                        type=\"checkbox\" \r\n                        onChange={(e) => this.setState({withApiExport: e.target.checked})}\r\n                    />\r\n                    <label>Include API Key</label>\r\n                    <br />\r\n                    {exportString ? <textarea readOnly={true} value={exportString} /> : null}\r\n                </form>\r\n                <form onSubmit={this.importSettingsSubmit}>\r\n                    <h4>Import Configuration</h4>\r\n                    <textarea id=\"importData\" name=\"importData\" />\r\n                    <button>Import</button>\r\n                </form>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SettingsMenu;","import React, { Component } from 'react';\r\n\r\nclass CharactersMenu extends Component {\r\n    existingCharacterList = () => {\r\n        return this.props.characters.map((character) => {\r\n            return(\r\n                <div key={this.characterString(character)}>\r\n                    <label onClick={() => this.deleteCharacter(character)}>\r\n                        {this.characterString(character)} -- Delete\r\n                    </label>\r\n                    <br/>\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n    \r\n    charactersAddSubmit = (event) => {\r\n        event.preventDefault();\r\n        const formData = new FormData(event.target);\r\n        const newChar = {\r\n            region:  formData.get('region'),\r\n            realm:  formData.get('realm'),\r\n            name:  formData.get('name'),\r\n        }\r\n        const newCharString = this.characterString(newChar);\r\n        const existing = this.props.characters.find(char => {\r\n            return this.characterString(char) === newCharString\r\n        });\r\n        if (existing) {\r\n            return false;\r\n        }\r\n        const characters = [\r\n            ...this.props.characters,\r\n            newChar\r\n        ];\r\n        this.props.onSaveCharacters(characters);\r\n    }\r\n    \r\n\r\n    characterString = (character) => {\r\n        return `${character.region}/${character.realm}/${character.name}`\r\n    }\r\n    \r\n    deleteCharacter = (character) => {\r\n        this.props.onSaveCharacters(this.props.characters.filter((char) => char !== character))\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {this.existingCharacterList()}\r\n                <form onSubmit={this.charactersAddSubmit}>\r\n                    <label>Region:</label> \r\n                    <input id=\"region\" type=\"text\" name=\"region\" />\r\n                    <br />\r\n                    <label>Realm:</label> \r\n                    <input id=\"realm\" type=\"text\" name=\"realm\" />\r\n                    <br />\r\n                    <label>Character Name:</label> \r\n                    <input id=\"name\" type=\"text\" name=\"name\" />\r\n                    <button>Add</button>\r\n                </form>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CharactersMenu;","import React, { Component } from 'react';\nimport './App.css';\nimport battlenet from './lib/battlenet';\n\nimport FriendList from './components/FriendList/FriendList';\nimport AppBar, { BarTab } from './components/AppBar/AppBar';\nimport SettingsMenu from './components/AppBar/SettingsMenu/SettingsMenu';\nimport CharactersMenu from './components/AppBar/CharactersMenu/CharactersMenu';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    const settings = JSON.parse(localStorage.getItem('settings') || '{}');\n    const characters = JSON.parse(localStorage.getItem('characters') || '[]');\n\n    this.state = {\n      settings: settings,\n      characters: characters,\n      battlenet: new battlenet(settings.apiKey)\n    }\n  }\n\n\n  onSaveSettings = (settings) => {\n    localStorage.setItem('settings', JSON.stringify(settings));\n    this.setState({\n      settings: {...settings},\n      battlenet: new battlenet(settings.apiKey)\n    })\n  };\n\n  onSaveCharacters = (characters) => {\n    localStorage.setItem('characters', JSON.stringify(characters));\n    this.setState({\n      characters: [...characters]\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <AppBar >\n          <BarTab title='Settings'>\n            <SettingsMenu \n              settings={this.state.settings}\n              characters={this.state.characters}\n              onSaveSettings={this.onSaveSettings}\n              onSaveCharacters={this.onSaveCharacters}\n            />\n          </BarTab>\n          <BarTab title='Characters'>\n            <CharactersMenu\n              characters={this.state.characters}\n              onSaveCharacters={this.onSaveCharacters}\n            />\n          </BarTab>\n        </AppBar>\n        <FriendList \n          battlenet={this.state.battlenet}\n          characters={this.state.characters}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppBar\":\"AppBar_AppBar__3eFER\",\"DropDown\":\"AppBar_DropDown__2CSlV\",\"open\":\"AppBar_open__1zElJ\",\"Logo\":\"AppBar_Logo__2bwKS\",\"DropDownTabHolder\":\"AppBar_DropDownTabHolder__-YNvH\",\"DropDownTab\":\"AppBar_DropDownTab__3EnnQ\",\"Active\":\"AppBar_Active__1g-W2\"};"],"sourceRoot":""}